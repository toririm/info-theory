#import "@preview/tenv:0.1.1": parse_dotenv

#set text(font: "Hiragino Kaku Gothic ProN")

#let env = parse_dotenv(read("../.env"))

= 情報理論レポート
#text(env.STUDENT_ID + " " + env.AUTHOR)

== 課題１

HTTP/1.1 について定めた RFC 9112 の文章をサンプルとして選び、解析を行った。

スペースや改行などの記号は除去せず、そのまま解析を行う。

解析に用いたプログラムのソースコードは https://github.com/toririm/info-theory で公開している。

実行結果を以下に示す。

```
$ go run .
downloading file from: https://www.rfc-editor.org/rfc/rfc9112.txt
content downloaded! (109913 byte)
length: 109913
total chars: 91
entropy: 4.657505
char count(ratio) x code(bit) = total bit
 1(0.00%) x 01101101110110101(17 bit) = 17 bit
ü 1(0.00%) x 11101101110110101(17 bit) = 17 bit
# 2(0.00%) x 0101101110110101(16 bit) = 32 bit
Q 3(0.00%) x 011001110110101(15 bit) = 45 bit
Z 3(0.00%) x 111001110110101(15 bit) = 45 bit
? 4(0.00%) x 001101110110101(15 bit) = 60 bit
{ 5(0.00%) x 01001101000100(14 bit) = 70 bit
} 5(0.00%) x 11001101000100(14 bit) = 70 bit
@ 5(0.00%) x 01001110110101(14 bit) = 70 bit
X 9(0.01%) x 11101110110101(14 bit) = 126 bit
% 10(0.01%) x 0001101000100(13 bit) = 130 bit
K 11(0.01%) x 0001110110101(13 bit) = 143 bit
j 17(0.02%) x 0101110110101(13 bit) = 221 bit
V 19(0.02%) x 0111011011011(13 bit) = 247 bit
J 20(0.02%) x 1111011011011(13 bit) = 260 bit
Y 22(0.02%) x 101101000100(12 bit) = 264 bit
G 37(0.03%) x 011011011011(12 bit) = 444 bit
; 43(0.04%) x 11101000100(11 bit) = 473 bit
' 53(0.05%) x 01000110101(11 bit) = 583 bit
z 54(0.05%) x 11000110101(11 bit) = 594 bit
< 61(0.06%) x 11110110101(11 bit) = 671 bit
> 62(0.06%) x 01011110101(11 bit) = 682 bit
W 67(0.06%) x 11011110101(11 bit) = 737 bit
+ 74(0.07%) x 01011011011(11 bit) = 814 bit
| 79(0.07%) x 0101000100(10 bit) = 790 bit
B 86(0.08%) x 0100001100(10 bit) = 860 bit
8 88(0.08%) x 1100001100(10 bit) = 880 bit
6 106(0.10%) x 0000110101(10 bit) = 1060 bit
D 116(0.11%) x 0110110101(10 bit) = 1160 bit
_ 119(0.11%) x 0101110101(10 bit) = 1190 bit
9 122(0.11%) x 1101110101(10 bit) = 1220 bit
5 122(0.11%) x 0011110101(10 bit) = 1220 bit
7 148(0.13%) x 0011011011(10 bit) = 1480 bit
: 152(0.14%) x 0111011011(10 bit) = 1520 bit
4 155(0.14%) x 1111011011(10 bit) = 1550 bit
[ 156(0.14%) x 0001000111(10 bit) = 1560 bit
] 156(0.14%) x 1001000111(10 bit) = 1560 bit
3 158(0.14%) x 0011000111(10 bit) = 1580 bit
N 163(0.15%) x 1011000111(10 bit) = 1630 bit
O 164(0.15%) x 001000100(9 bit) = 1476 bit
* 165(0.15%) x 000001100(9 bit) = 1485 bit
L 191(0.17%) x 011101100(9 bit) = 1719 bit
U 200(0.18%) x 111101100(9 bit) = 1800 bit
E 218(0.20%) x 100110101(9 bit) = 1962 bit
0 218(0.20%) x 010110101(9 bit) = 1962 bit
F 241(0.22%) x 001110101(9 bit) = 2169 bit
) 256(0.23%) x 111110101(9 bit) = 2304 bit
( 256(0.23%) x 011000011(9 bit) = 2304 bit
x 283(0.26%) x 111000011(9 bit) = 2547 bit
2 285(0.26%) x 010011011(9 bit) = 2565 bit
A 285(0.26%) x 110011011(9 bit) = 2565 bit
k 287(0.26%) x 001011011(9 bit) = 2583 bit
M 293(0.27%) x 101011011(9 bit) = 2637 bit
R 315(0.29%) x 101000111(9 bit) = 2835 bit
I 323(0.29%) x 111000111(9 bit) = 2907 bit
/ 337(0.31%) x 11000100(8 bit) = 2696 bit
q 348(0.32%) x 10001100(8 bit) = 2784 bit
" 350(0.32%) x 01101100(8 bit) = 2800 bit
C 393(0.36%) x 00100101(8 bit) = 3144 bit
H 406(0.37%) x 10100101(8 bit) = 3248 bit
P 411(0.37%) x 01100101(8 bit) = 3288 bit
= 424(0.39%) x 11100101(8 bit) = 3392 bit
S 528(0.48%) x 01000011(8 bit) = 4224 bit
1 558(0.51%) x 00011011(8 bit) = 4464 bit
v 650(0.59%) x 0000100(7 bit) = 4550 bit
b 725(0.66%) x 1001100(7 bit) = 5075 bit
w 738(0.67%) x 0101100(7 bit) = 5166 bit
, 749(0.68%) x 0001001(7 bit) = 5243 bit
y 769(0.70%) x 1001001(7 bit) = 5383 bit
T 1067(0.97%) x 0000011(7 bit) = 7469 bit
- 1236(1.12%) x 0000111(7 bit) = 8652 bit
. 1404(1.28%) x 100100(6 bit) = 8424 bit
m 1521(1.38%) x 101001(6 bit) = 9126 bit
g 1535(1.40%) x 011001(6 bit) = 9210 bit
u 1582(1.44%) x 111001(6 bit) = 9492 bit
p 1586(1.44%) x 000101(6 bit) = 9516 bit
f 1695(1.54%) x 010101(6 bit) = 10170 bit
l 2296(2.09%) x 100011(6 bit) = 13776 bit
\n 2461(2.24%) x 111011(6 bit) = 14766 bit
h 2628(2.39%) x 100111(6 bit) = 15768 bit
d 2744(2.50%) x 10100(5 bit) = 13720 bit
c 2995(2.72%) x 11100(5 bit) = 14975 bit
a 4701(4.28%) x 10011(5 bit) = 23505 bit
r 4771(4.34%) x 01011(5 bit) = 23855 bit
s 5217(4.75%) x 10111(5 bit) = 26085 bit
o 5243(4.77%) x 01111(5 bit) = 26215 bit
i 5346(4.86%) x 11111(5 bit) = 26730 bit
n 6083(5.53%) x 0001(4 bit) = 24332 bit
t 6802(6.19%) x 1101(4 bit) = 27208 bit
e 10600(9.64%) x 000(3 bit) = 31800 bit
  22517(20.49%) x 10(2 bit) = 45034 bit
total 517180 bit (64647 byte)
```

計算結果より以下がわかる。
解析前の文字列の長さは $109913$ 文字(byte)であり、文字の種類は $91$ 種類である。
解析前の文章のエントロピーは $H(X)=4.657505$ である。

ハフマン符号化した文章は $517180 "bit"$ である。

=== 考察

以上の結果より、平均符号語長は
$
  overline(L) / n = 517180 / 109913 tilde 4.7053
$
となる。

情報源符号化定理より、任意の $epsilon > 0$ に対し
$
  H(X) <= overline(L) / n < H(X) + epsilon
$
が成り立つ。

情報源符号化定理は、平均符号語長の理論的な下限を決める。
ハフマン符号によって得られた平均符号語長は、理論的な下限に近い値であることがわかる。

元のテキストは約 $107 "KB"$ であるが、ハフマン符号化した文章の総サイズは約 $63 "KB"$ となる。符号化を解読するために辞書が必要になる。辞書のサイズを見積もると $91 * 17 "bit" = 1547 "bit" tilde 194 "byte"$ で、大きく見積もっても $1 "KB"$ に満たない。

この仮定下において、ファイルサイズを
$ (64 "KB") / (107 "KB") = 0.598... $
と、$6$ 割程度に圧縮することができるとわかる。

== 課題２

== 課題３
